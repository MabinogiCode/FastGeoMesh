name: CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      - name: Restore
        run: dotnet restore
      - name: Build
        run: dotnet build --configuration Release --no-restore
      - name: Test with coverage
        run: |
          dotnet test --configuration Release --no-build \
            --collect:"XPlat Code Coverage" \
            --results-directory ./tests/TestResults \
            --logger trx \
            --verbosity normal
      - name: Debug Coverage Files
        run: |
          echo "=== Searching for coverage files ==="
          find ./tests/TestResults -name "*coverage*" -type f || echo "No coverage files found"
          find ./tests/TestResults -name "*.xml" -type f || echo "No XML files found"
          find ./tests/TestResults -name "*.cobertura*" -type f || echo "No Cobertura files found"
          ls -la ./tests/TestResults/ || echo "TestResults directory not found"
      - name: Upload coverage artifact (OpenCover)
        uses: actions/upload-artifact@v4
        with:
          name: coverage-opencover
          path: tests/TestResults/**/coverage.opencover.xml
          if-no-files-found: warn
      - name: Upload coverage artifact (Cobertura)
        uses: actions/upload-artifact@v4
        with:
          name: coverage-cobertura
          path: tests/TestResults/**/coverage.cobertura.xml
          if-no-files-found: warn
      - name: Upload to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./tests/TestResults
          files: "**/*coverage*.xml"
          flags: unittests
          fail_ci_if_error: false
          verbose: true
          name: fastgeomesh-coverage

  benchmarks:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      - name: Restore
        run: dotnet restore
      - name: Build benchmarks
        run: dotnet build benchmarks/FastGeoMesh.Benchmarks --configuration Release --no-restore
      - name: Run rectangle vs tessellation benchmarks
        run: dotnet run --project benchmarks/FastGeoMesh.Benchmarks -c Release -- rectangle
      - name: Run mesh size benchmarks
        run: dotnet run --project benchmarks/FastGeoMesh.Benchmarks -c Release -- size
      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: benchmarks/FastGeoMesh.Benchmarks/BenchmarkDotNet.Artifacts/**/*
