name: ci

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: ['**']
  push:
    branches: ['**']
    paths:
      - 'src/**'
      - 'tests/**'
      - '.github/workflows/ci.yml'
      - 'docs/**'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-test-docs:
    name: Build / Test / Coverage / Docs
    runs-on: ubuntu-latest
    outputs:
      coverage: ${{ steps.coverage.outputs.line_rate }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
          cache: true

      - name: Restore (generate/update lock files)
        run: dotnet restore --use-lock-file

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Test with coverage
        run: dotnet test --configuration Release --no-build --collect "Xplat Code Coverage" --results-directory coverage

      - name: Extract coverage percentage
        id: coverage
        shell: bash
        run: |
          report=$(find coverage -name 'coverage.cobertura.xml' | head -n 1)
          if [ -f "$report" ]; then
            lineRate=$(xmllint --xpath 'string(/coverage/@line-rate)' "$report" 2>/dev/null || echo "0")
            pct=$(awk -v r="$lineRate" 'BEGIN{ if(r==""||r=="NaN") r=0; printf("%.2f", r*100); }')
            echo "line_rate=$pct" >> $GITHUB_OUTPUT
          else
            echo "line_rate=0" >> $GITHUB_OUTPUT
          fi

      - name: Generate sample exports & badges (only main push)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          COVERAGE: ${{ steps.coverage.outputs.line_rate }}
        shell: bash
        run: |
          set -e
          echo "Coverage: $COVERAGE%"
          dotnet run --project samples/FastGeoMesh.Sample/FastGeoMesh.Sample.csproj --configuration Release -- --obj --gltf --svg
          mkdir -p docs/images docs/badges
          [ -f sample_mesh.svg ] && mv sample_mesh.svg docs/images/generated-sample.svg
          count=0
          [ -f sample_mesh.obj ] && count=$((count+1))
            [ -f sample_mesh.gltf ] && count=$((count+1))
          [ -f docs/images/generated-sample.svg ] && count=$((count+1))
          pct=${COVERAGE:-0}
          color=$(awk 'BEGIN{r='"$pct"'; if(r>=90) c="brightgreen"; else if(r>=80) c="green"; else if(r>=70) c="yellow"; else if(r>=60) c="orange"; else c="red"; print c;}')
          # Generate coverage badge (single-line printf to avoid YAML heredoc issues)
          printf '%s' "<svg xmlns='http://www.w3.org/2000/svg' width='130' height='20' role='img' aria-label='coverage ${pct}%%'><linearGradient id='s' x2='0' y2='100%'><stop offset='0' stop-color='#bbb' stop-opacity='.1'/><stop offset='1' stop-opacity='.1'/></linearGradient><rect rx='3' width='130' height='20' fill='#555'/><rect rx='3' x='70' width='60' height='20' fill='${color}'/><path fill='${color}' d='M70 0h4v20h-4z'/><rect rx='3' width='130' height='20' fill='url(#s)'/><g fill='#fff' text-anchor='middle' font-family='Verdana,Geneva,DejaVu Sans,sans-serif' font-size='11'><text x='35' y='15' fill='#010101' fill-opacity='.3'>coverage</text><text x='35' y='14'>coverage</text><text x='99' y='15' fill='#010101' fill-opacity='.3'>${pct}%%</text><text x='99' y='14'>${pct}%%</text></g></svg>" > docs/badges/coverage.svg
          # Generate exports badge
          printf '%s' "<svg xmlns='http://www.w3.org/2000/svg' width='120' height='20' role='img' aria-label='exports ${count}'><linearGradient id='s' x2='0' y2='100%'><stop offset='0' stop-color='#bbb' stop-opacity='.1'/><stop offset='1' stop-opacity='.1'/></linearGradient><rect rx='3' width='120' height='20' fill='#555'/><rect rx='3' x='60' width='60' height='20' fill='blue'/><path fill='blue' d='M60 0h4v20h-4z'/><rect rx='3' width='120' height='20' fill='url(#s)'/><g fill='#fff' text-anchor='middle' font-family='Verdana,Geneva,DejaVu Sans,sans-serif' font-size='11'><text x='30' y='15' fill='#010101' fill-opacity='.3'>exports</text><text x='30' y='14'>exports</text><text x='89' y='15' fill='#010101' fill-opacity='.3'>${count}</text><text x='89' y='14'>${count}</text></g></svg>" > docs/badges/exports.svg
          git config user.name github-actions
          git config user.email actions@github.com
          git add docs/images/generated-sample.svg docs/badges/coverage.svg docs/badges/exports.svg || true
          git commit -m "chore(ci): update generated sample & badges [skip ci]" || echo "No changes to commit"
          git push || echo "No push"

      - name: Upload artifacts (docs + coverage report)
        uses: actions/upload-artifact@v4
        with:
          name: docs-and-coverage
          path: |
            docs/**
            coverage/**

      - name: Report summary
        if: always()
        run: |
          echo "# CI Summary" >> $GITHUB_STEP_SUMMARY
          echo "* Result: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "* Coverage: ${{ steps.coverage.outputs.line_rate }}%" >> $GITHUB_STEP_SUMMARY
